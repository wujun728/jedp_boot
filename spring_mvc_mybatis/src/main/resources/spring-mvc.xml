<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	  xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/aop 
    http://www.springframework.org/schema/aop/spring-aop.xsd">
    
	<!-- 扫描所有的controller 但是不扫描service-->  
	<context:component-scan base-package="com.hengxin.module.*">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.validation.annotation.Validated"/>
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>
	</context:component-scan>
	
	 <aop:aspectj-autoproxy/>
	 
	 <bean class="com.qbt.framework.bean.ConfigurationHelper" />
	
		<!-- 以下 validator ConversionService 在使用 mvc:annotation-driven 会 自动注册 -->
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean">
		<property name="providerClass" value="org.hibernate.validator.HibernateValidator" />
		<!-- 如果不加默认到 使用classpath下的 ValidationMessages.properties -->
		<!-- <property name="validationMessageSource" ref="messageSource" /> -->
	</bean>
	
	 <!-- 注册方法验证后置处理器  -->
	<bean class="org.springframework.validation.beanvalidation.MethodValidationPostProcessor">
		<property name="validator" ref="validator" />
	</bean>
	 
	 
	 
	<bean id="byteArrayHttpMessageConverter" class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
    <bean id="stringHttpMessageConverter" class="org.springframework.http.converter.StringHttpMessageConverter">
        <constructor-arg value="UTF-8"/>
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>
    <!-- JSON支持，避免IE执行AJAX时,返回JSON出现下载文件     -->
    <bean id="fastJsonHttpMessageConverter" class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
        <property name="features">
        	<list>
        		<value>DisableCircularReferenceDetect</value>
        	</list>
        </property>
        
        
    </bean>
	 
	 <bean id="exceptionInterceptor" class="com.qbt.framework.interceptor.ExceptionInterceptor">
        <property name="jsonMessageConverter" ref="fastJsonHttpMessageConverter"/>
        <property name="order" value="1"/>
        <property name="errorCode" value="400"></property>
        <property name="errorMessage" value="系统出现异常，请联系管理人员"></property>
    </bean>
	 
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL-->
	 <mvc:annotation-driven validator="validator"  >  
       <mvc:message-converters register-defaults="false">
            <ref bean="byteArrayHttpMessageConverter"/>
            <ref bean="stringHttpMessageConverter"/>
            <ref bean="fastJsonHttpMessageConverter"/>
        </mvc:message-converters>  
    </mvc:annotation-driven> 
	
	<!-- 这个类的名称必须要是这个，应该底层就是通过这个名称来查询的 -->
	<bean id="requestDataValueProcessor" class="cn.singno.bob.web.security.CsrfRequestDataValueProcessor"></bean>
	<mvc:interceptors>
		<mvc:interceptor>
			<!--  这里填写排除以外的URL  -->
			<mvc:mapping path="/**"/>
			<bean class="cn.singno.bob.web.security.CsrfInterceptor" >
				<property name="loginUrl" value="/common/403"></property>
			</bean>
		</mvc:interceptor>		
	</mvc:interceptors>
	
	
	
	
	 <!--  静态资源访问 的两种方式  -->  
     <mvc:default-servlet-handler/>   
 <!--    <mvc:resources location="/*" mapping="/**" />  -->
    
    
  <!--  文件上传 -->
    <bean id="multipartResolver"  
	    class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
	    <property name="defaultEncoding">  
	        <value>UTF-8</value>  
	    </property>  
	    <property name="maxUploadSize">  
	        <value>31457280</value><!-- 上传文件大小限制为30M，30*1024*1024   -->
	    </property>  
	    <property name="maxInMemorySize">  
	        <value>4096</value>  
	    </property>  
	</bean>
      
	
	
	
	

	
	
	
	
	 <!-- jsp页面解析器，当Controller返回XXX字符串时，先通过拦截器，然后该类就会在/WEB-INF/views/目录下，查找XXX.jsp文件 -->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/"/>
		<property name="suffix" value=".jsp"/>
	</bean>
	
	 	<!-- FreeMarker视图解析   如返回student。。在这里配置后缀名ftl和视图解析器。
	 <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		  <property name="viewClass" value="com.ssm.common.util.MyFreeMarkerView"></property>
		  <property name="prefix" value=""/>
		  <property name="suffix" value=".ftl" />
		  <property name="contentType" value="text/html;charset=utf-8" />
		  <property name="exposeRequestAttributes" value="true" />
		  <property name="exposeSessionAttributes" value="true" />
		  <property name="exposeSpringMacroHelpers" value="true" />
		  <property name="requestContextAttribute" value="request"></property>
	 </bean>
	 。-->
	 
	 
	<!-- freemarker的配置 
	 <bean id="freemarkerConfig" class="com.ssm.shiro.ShiroTagFreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/WEB-INF/views/" />
		<property name="defaultEncoding" value="utf-8" />
		<property name="freemarkerSettings">
		   <props>
			    <prop key="template_update_delay">10</prop>
			    <prop key="locale">zh_CN</prop>
			    <prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
			    <prop key="date_format">yyyy-MM-dd</prop>
			    <prop key="number_format">#.##</prop>
		   </props>
		</property>
	 </bean>-->
	 
	 <!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/common/login"/>
	

	<!-- 支持 Shiro对Controller的方法级AOP安全控制 begin
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	 支持 Shiro对Controller的方法级AOP安全控制 end  -->  
	 
	 	<!-- shiro 开启注解  -->
	<aop:config proxy-target-class="true"></aop:config>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>
   
	      	
</beans>