package ${package.Controller};

import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import org.springframework.util.StringUtils;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.chehejia.framework.beans.model.Response;
import com.chehejia.framework.beans.model.page.PageParam;
import com.chehejia.framework.beans.model.page.PageResult;
import org.springframework.util.CollectionUtils;
import lombok.AllArgsConstructor;
import lombok.NoArgsConstructor;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import java.util.*;
import lombok.Data;

#if(${cfg.restControllerStyle})
#else
import org.springframework.stereotype.Controller;
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.comment} 前端控制器
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
#if(${cfg.restControllerStyle})
@RestController
#else
@Controller
#end
#set($kebabName = $table.name.replace('_','-'))
@RequestMapping("/${kebabName}")
#if(${kotlin})
class ${table.controllerName}#if(${superControllerClass}) : ${superControllerClass}()#end

#else
#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end

    #set($lowerCaseServiceName = $table.serviceName.substring(0,1).toLowerCase() + $table.serviceName.substring(1,$table.serviceName.length()))

    @Autowired
    private ${table.serviceName} ${lowerCaseServiceName};

    #set($lowrEntity = $table.entityName.substring(0,1).toLowerCase() + $table.entityName.substring(1,$table.entityName.length()))

    /**
    * 通过id查询
    */
    @GetMapping("/get-by-id/{id}")
    public Response getById(@PathVariable(value = "id") Integer id){
        return Response.success(${lowerCaseServiceName}.getById(id));
    }

    /**
    * 新增
    */
    @PostMapping("/save")
    public Response save(@RequestBody ${table.entityName} ${lowrEntity}){
        ${lowerCaseServiceName}.save(${lowrEntity});
        return Response.success();
    }

    /**
    * 通过id删除
    */
    @DeleteMapping("/delete-by-id/{id}")
    public Response delete(@PathVariable(value = "id") String ids){
        String[] idsStrs = ids.split(",");
        for (String id:idsStrs){
            ${lowerCaseServiceName}.removeById(Integer.parseInt(id));
        }
        return Response.success();
    }

    /**
    * 修改
    */
    @PutMapping("/update")
    public Response updateById(@RequestBody ${table.entityName} ${lowrEntity}){
        ${lowerCaseServiceName}.updateById(${lowrEntity});
        return Response.success();
    }


    /**
    * 查询列表
    */
    @PostMapping("/list")
    public Response list(@RequestBody ${table.entityName}ReqVo ${lowrEntity} ){
    final LambdaQueryWrapper<${table.entityName}> lambda = new QueryWrapper<${table.entityName}>().lambda();
        this.buildCondition(lambda,${lowrEntity});
        return Response.success(${lowerCaseServiceName}.list(lambda));
    }

    /**
    * 分页查询
    */
    @PostMapping("/page")
    public Response page(@RequestBody PageParam<${table.entityName}ReqVo> pageParam){
        final ${table.entityName}ReqVo param = pageParam.getParam();
        final LambdaQueryWrapper<${table.entityName}> lambda = new QueryWrapper<${table.entityName}>().lambda();
        this.buildCondition(lambda,param);
        final IPage<${table.entityName}> page = ${lowerCaseServiceName}.page(new Page<>(pageParam.getPageNo(), pageParam.getPageSize()), lambda);
        PageResult<${table.entityName}> pr = new PageResult();
        pr.setPageCount(page.getPages());
        pr.setTotalCount(page.getTotal());
        pr.setPageNo(new Long(page.getCurrent()).intValue());
        pr.setPageSize((int) page.getSize());
        pr.setResults(page.getRecords());
        return Response.success(pr);
    }


        /**
        * 构造查询条件
        * @param lambda
        * @param param
        */
        private void buildCondition(LambdaQueryWrapper<${table.entityName}> lambda, ${table.entityName}ReqVo param){
#foreach($field in ${table.fields})
#set($upperFieldName = $field.propertyName.substring(0,1).toUpperCase() + $field.propertyName.substring(1,$field.propertyName.length()))
#if(${field.propertyType} == 'OffsetDateTime' || ${field.propertyType} == 'DateTime' || ${field.propertyType} == 'Date' )
            if(!CollectionUtils.isEmpty(param.get${upperFieldName}List())){
                lambda.ge(${table.entityName}::get${upperFieldName}, param.get${upperFieldName}List().get(0));
                lambda.le(${table.entityName}::get${upperFieldName}, param.get${upperFieldName}List().get(1));
            }
#else
            if(!StringUtils.isEmpty(param.get${upperFieldName}())){
                lambda.eq(${table.entityName}::get${upperFieldName}, param.get${upperFieldName}());
            }
#end
#end
            lambda.orderBy(true,false, ${table.entityName}::getId);
        }


        /**
         * 请求model
         */
        @Data
        @NoArgsConstructor
        @AllArgsConstructor
        private static class ${table.entityName}ReqVo extends ${table.entityName} {
#foreach($field in ${table.fields})
#if(${field.propertyType} == 'OffsetDateTime' || ${field.propertyType} == 'DateTime' || ${field.propertyType} == 'Date' )
            private List<String> ${field.propertyName}List; // ${field.comment}起止
#end
#end
        }


}
#end
