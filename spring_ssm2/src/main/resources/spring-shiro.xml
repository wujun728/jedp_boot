<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd ">

	<description>== Shiro 基于角色的权限安全控制 ==</description>
	
    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->  
	<bean id="userRealm" class="com.wuzy.core.shiro.UserRealm"/>
	
	<!-- Shiro的主要业务层对象基于web的应用程序 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="userRealm" />
		<property name="sessionManager" ref="sessionManager" />
	</bean>
	
	<!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->  
	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->  
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>  
	    <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性,默认会自动寻找Web工程根目录下的"/login.html"页面 -->  
	    <property name="loginUrl" value="/"/>  
	    <!-- 登录成功后要跳转的连接 -->  
	    <property name="successUrl" value="/sys/index"/>
	    <!-- 用户访问未对其授权的资源时,所显示的连接 -->  
	    <property name="unauthorizedUrl" value="/"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <!-- 此处可配合我的这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->  
	    <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值来的 -->  
	    <!-- anon：它对应的过滤器里面是空的,什么都没做,这里.do和.jsp后面的*表示参数,比方说login.jsp?main这种 -->  
	    <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->  
	    <property name="filterChainDefinitions">  
	        <value>
				/favicon.ico=anon
	        	/static/**=anon
	        	/sys/login=anon
                /sys/index**=authc  
                /sys/info=authc  
                /sys/list**=authc,perms[admin:manage]  
	        </value>
	    </property>
	</bean>
	<!-- sessionManager -->
	<bean id="sessionManager" class="com.wuzy.core.shiro.SessionManager">
        <property name="globalSessionTimeout" value="${session.outdate}" />
        <property name="deleteInvalidSessions" value="true" />
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <property name="sessionDAO" ref="redisSessionSessionDao" />
        <property name="redisManager" ref="redisManager" />
    </bean>
    <!-- sessionId 生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator" />
    
    <bean id="redisSessionSessionDao" class="com.wuzy.core.shiro.RedisSessionDao">
        <property name="sessionIdGenerator" ref="sessionIdGenerator" />
        <property name="redisManager" ref="redisManager"/>
        <property name="activeSessionsCacheName" value="shiro_activeSessionCache_" />
    </bean>
    
    <!-- 用户授权信息Cache, 采用EhCache 
	<bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:cache/ehcache-shiro.xml"/>
	</bean>
	-->
	
	<!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
	
	<!-- AOP式方法级权限检查 用这个可以将权限注解在controller上 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor">
		<property name="proxyTargetClass" value="true" />
	</bean>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
    	<property name="securityManager" ref="securityManager"/>
	</bean>
	
	<!--缓存管理-->
    <bean id="cache" class="com.wuzy.core.shiro.cache.YCache">
        <property name="redisManager" ref="redisManager"/>
    </bean>
    <bean id="cacheManager" class="com.wuzy.core.shiro.cache.YCacheManager">
        <property name="cache" ref="cache"/>
    </bean>
    

</beans>

