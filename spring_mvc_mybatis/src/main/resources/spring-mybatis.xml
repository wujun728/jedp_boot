<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
       
       <!-- 1.配置注解的自动扫描
	<context:component-scan base-package="cn.singno.bob.jpa.service.*" />	 -->
	<context:component-scan base-package="com.qbt.framework.modul.*">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>
	
	
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	 <aop:aspectj-autoproxy/>
	
	<!-- 配置数据源 -->
	<bean name="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource" >
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="0" />
		<!-- 连接池最大使用连接数量  20-->
		<property name="maxActive" value="1" />
		<!-- 连接池最大空闲 20-->
		<property name="maxIdle" value="1" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="60000" />

		<!-- <property name="poolPreparedStatements" value="true" /> <property name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->

		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />

		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />

		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	
	<!-- 读库 -->
	<bean id="readDataSource" parent="parentDataSource" init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
	</bean>
	
	
	<!-- 读写分离 -->
	<bean id="dataSource" class="com.qbt.framework.core.DynamicDataSource">
		<property name="writeDataSource" ref="readDataSource"></property>
		<property name="readDataSourceMap" >
			<map>
				 <entry key="read" value-ref="readDataSource" /> 
			</map>
		</property>
		<!-- <property name="targetDataSources">  
            <map key-type="java.lang.String">  
                <entry key="read" value-ref="readDataSource" />  
            </map>  
        </property>  
        <property name="defaultTargetDataSource" ref="readDataSource" />  -->
	</bean>
	
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations">
			<array>
				<value>classpath:mapper/*/*.xml</value>
			</array>
		</property>
		<property name="typeAliasesPackage" value="com.qbt.framework.modul.entity" />
		<property name="plugins">
			<array>
				<bean class="com.qbt.framework.interceptor.PerformanceInterceptor"/>
				<bean class="com.github.pagehelper.PageHelper">
					<property name="properties">
						<value>
							dialect=hsqldb
							reasonable=true
						</value>
					</property>
				</bean>
				<bean class="tk.mybatis.mapper.mapperhelper.MapperInterceptor">
					<property name="properties">
						<value>
							mappers=com.qbt.framework.base.BaseMapper
							IDENTITY=MYSQL
							notEmpty=true
						</value>
					</property>
				</bean>
			</array>
		</property>
	</bean>
	
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
         <property name="basePackage" value="com.qbt.framework.modul.mapper"/>
         <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
     </bean>
	
	
	
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
        <constructor-arg index="0" ref="sqlSessionFactory"/>
    </bean>
	
       
    <!-- 配置事务管理器-->
	 <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>



	<!-- 注解方式配置事物 -->
	<!-- <tx:annotation-driven transaction-manager="transactionManager" /> -->

	<!-- 拦截器方式配置事物  -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="save*" propagation="REQUIRED"  rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED"  rollback-for="Exception" />
			<tx:method name="modify*" propagation="REQUIRED"  rollback-for="Exception" />
			<tx:method name="edit*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="remove*" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="repair" propagation="REQUIRED"  rollback-for="Exception"/>
			<tx:method name="deleteAndRepair" propagation="REQUIRED"  rollback-for="Exception"/>

			<tx:method name="get*" propagation="SUPPORTS" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="load*" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="datagrid*" propagation="SUPPORTS" />
			<tx:method name="select*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	
	<bean id="dynamicDataSourceProcessor" class="com.qbt.framework.core.DynamicDataSourceProcessor"></bean>
	
	<aop:config>
		<aop:pointcut id="transactionPointcut" expression="execution(* com.qbt.framework.modul..*ServiceImpl.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
		<aop:aspect ref="dynamicDataSourceProcessor" order="-2147483648">
			<aop:around method="changeDataSource" pointcut-ref="transactionPointcut"/>
		</aop:aspect>
	</aop:config>   
       
       
       
</beans>       